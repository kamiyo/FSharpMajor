// This code was generated by `SqlHydra.Npgsql` -- v2.0.0.0.
namespace FSharpMajor.DatabaseTypes


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

    type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getValue o :?> byte[])

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module ``public`` =
    [<CLIMutable>]
    type directories = { id: int; path: string }

    let directories = SqlHydra.Query.Table.table<directories>

    [<CLIMutable>]
    type schema_migrations = { version: string }

    let schema_migrations = SqlHydra.Query.Table.table<schema_migrations>

    [<CLIMutable>]
    type users =
        { id: System.Guid
          username: string
          password: string
          scrobbling: bool
          admin_role: bool
          settings_role: bool
          download_role: bool
          upload_role: bool
          playlist_role: bool
          cover_art_role: bool
          podcast_role: bool
          comment_role: bool
          stream_role: bool
          jukebox_role: bool
          share_role: bool
          video_conversion_role: bool
          max_bit_rate: Option<int>
          avatar_last_changed: Option<System.DateTime> }

    let users = SqlHydra.Query.Table.table<users>

    module Readers =
        type directoriesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.path = RequiredColumn(reader, getOrdinal, reader.GetString, "path")

            member __.Read() =
                { directories.id = __.id.Read()
                  path = __.path.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type schema_migrationsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.version = RequiredColumn(reader, getOrdinal, reader.GetString, "version")

            member __.Read() =
                { schema_migrations.version = __.version.Read() }

            member __.ReadIfNotNull() =
                if __.version.IsNull() then None else Some(__.Read())

        type usersReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
            member __.username = RequiredColumn(reader, getOrdinal, reader.GetString, "username")
            member __.password = RequiredColumn(reader, getOrdinal, reader.GetString, "password")
            member __.scrobbling = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "scrobbling")
            member __.admin_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "admin_role")
            member __.settings_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "settings_role")
            member __.download_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "download_role")
            member __.upload_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "upload_role")
            member __.playlist_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "playlist_role")
            member __.cover_art_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "cover_art_role")
            member __.podcast_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "podcast_role")
            member __.comment_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "comment_role")
            member __.stream_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "stream_role")
            member __.jukebox_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "jukebox_role")
            member __.share_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "share_role")
            member __.video_conversion_role = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "video_conversion_role")
            member __.max_bit_rate = OptionalColumn(reader, getOrdinal, reader.GetInt32, "max_bit_rate")
            member __.avatar_last_changed = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "avatar_last_changed")

            member __.Read() =
                { users.id = __.id.Read()
                  username = __.username.Read()
                  password = __.password.Read()
                  scrobbling = __.scrobbling.Read()
                  admin_role = __.admin_role.Read()
                  settings_role = __.settings_role.Read()
                  download_role = __.download_role.Read()
                  upload_role = __.upload_role.Read()
                  playlist_role = __.playlist_role.Read()
                  cover_art_role = __.cover_art_role.Read()
                  podcast_role = __.podcast_role.Read()
                  comment_role = __.comment_role.Read()
                  stream_role = __.stream_role.Read()
                  jukebox_role = __.jukebox_role.Read()
                  share_role = __.share_role.Read()
                  video_conversion_role = __.video_conversion_role.Read()
                  max_bit_rate = __.max_bit_rate.Read()
                  avatar_last_changed = __.avatar_last_changed.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazypublicdirectories = lazy (``public``.Readers.directoriesReader (reader, buildGetOrdinal 2))
    let lazypublicschema_migrations = lazy (``public``.Readers.schema_migrationsReader (reader, buildGetOrdinal 1))
    let lazypublicusers = lazy (``public``.Readers.usersReader (reader, buildGetOrdinal 18))
    member __.``public.directories`` = lazypublicdirectories.Value
    member __.``public.schema_migrations`` = lazypublicschema_migrations.Value
    member __.``public.users`` = lazypublicusers.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "public.directories", false -> __.``public.directories``.Read >> box
        | "public.directories", true -> __.``public.directories``.ReadIfNotNull >> box
        | "public.schema_migrations", false -> __.``public.schema_migrations``.Read >> box
        | "public.schema_migrations", true -> __.``public.schema_migrations``.ReadIfNotNull >> box
        | "public.users", false -> __.``public.users``.Read >> box
        | "public.users", true -> __.``public.users``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<bool []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int16 []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int64 []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<double []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<decimal []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<string []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.Guid []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<System.TimeSpan []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.DateOnly []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.TimeOnly []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTime []> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else if t = typedefof<char []> then Some(wrap reader.GetFieldValue)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
